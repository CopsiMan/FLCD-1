N{program,declaration,type1,arraydecl,type,cmpdstmt,stmtlist,stmt,simplestmt,assignstmt,expression,operation,term,constant,iostmt,structstmt,ifstmt,whilestmt,condition,relation,letter,digit,integer,non_zero_digit,digit,string,character,sequence,sequence_numbers,sequence_chars}
E{begin,end,;,int,char,[,],=,(,),+,-,*,/,%,input,print,if,else,while,<,<=,!=,>=,>,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,0,1,2,3,4,5,6,7,8,9,"}
S{program}
P{program->begin declaration stmtlist end,declaration->type identifier;,type1->int|char,araydecl->type1[],type->type1|arraydecl,cmpdstmt->begin stmtlist end,stmtlist->stmt|stmt;stmtlist,stmt->declaration|simplestmt|structstmt,simplestmt->assignstmt|iostmt,assignstmt->identifier=expression;,expression->term|expression operation expression|(expression operation expression),operation->+|-|*|/|%,term->identifier|constant,constant->integer|string,iostmt->input(identifier);|print(identifier);|print(constant);,structstmt->ifstmt|whilestmt,ifstmt->if(condition)cmpdstmt|if(condition)cmpdstmt else cmpdstmt,whilestmt->while(condition) cmpdstmt,condition->expression relation expression,relation-><|<=|=|!=|>=|>,identifier->letter|letter sequence,sequence->letter|digit|letter sequence|digit sequence,letter->A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z,digit->0|1|2|3|4|5|6|7|8|9,integer->0|non_zero_digit|+non_zero_digit|-non_zero_digit|non_zero_digit sequence_numbers|+non_zero_digit sequence_numbers|-non_zero_digit sequence_numbers,non_zero_digit->1|2|3|4|5|6|7|8|9,sequence_numbers->digit|digit sequence_numbers,string->"character"|"character sequence_chars",character->letter|digit,sequence_chars->character|character sequence_chars}
